{"version":3,"sources":["Nav.js","Shop.js","About.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","textDecoration","className","to","style","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","console","log","map","item","key","itemid","name","About","ItemDetail","match","fetchItem","params","id","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPA8BeA,MA1Bf,WACM,IAAMC,EAAU,CACVC,MAAO,UACPC,eAAgB,QAG1B,OACE,6BACM,oCACA,wBAAIC,UAAU,aACR,kBAAC,IAAD,CAAMC,GAAG,SAASC,MAAOL,GAEzB,sCAIA,kBAAC,IAAD,CAAMI,GAAG,QAAQC,MAAOL,GAExB,wC,gCCUDM,MA7Bf,WAEMC,qBAAU,WACJC,MACH,IAJO,MAMgBC,mBAAS,IANzB,mBAMHC,EANG,KAMIC,EANJ,KAQJH,EAAU,uCAAG,8BAAAI,EAAA,sEACMC,MAAM,qEADZ,cACPC,EADO,gBAIOA,EAAKC,OAJZ,OAIPL,EAJO,OAKbM,QAAQC,IAAIH,GACZE,QAAQC,IAAIP,EAAMA,OAClBC,EAASD,EAAMA,OAPF,2CAAH,qDAStB,OACM,6BACOA,EAAMQ,KAAI,SAAAC,GAAI,OACT,wBAAIC,IAAKD,EAAKE,QAASF,EAAKG,KAA5B,IACM,kBAAC,IAAD,CAAMlB,GAAE,gBAAWe,EAAKE,SAAWF,EAAKG,YCXjDC,MAVf,WACE,OACE,6BAEA,4CCgBWC,MApBf,SAAqBC,GACflB,qBAAU,WACJmB,IACAV,QAAQC,IAAIQ,KACf,IAJoB,MAKChB,mBAAS,IALV,mBAKhBU,EALgB,KAOjBO,GAPiB,KAOR,uCAAG,8BAAAd,EAAA,sEACYC,MAAM,qEAAD,OAAsEY,EAAME,OAAOC,KADpG,cACNF,EADM,gBAEOA,EAAUX,OAFjB,OAENI,EAFM,OAGZH,QAAQC,IAAIE,GAHA,2CAAH,sDAKnB,OACE,6BACM,oCACJ,4BAAKA,EAAKG,Q,OCWhB,IAAMO,EAAO,kBACX,oCACA,2CAIaC,EA5Bf,WACE,OACE,kBAAC,IAAD,KAEA,yBAAK3B,UAAU,OAEf,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAO4B,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWV,IAChC,kBAAC,IAAD,CAAOQ,KAAK,QAAQC,OAAK,EAACC,UAAW3B,IACrC,kBAAC,IAAD,CAAOyB,KAAK,YAAYE,UAAWT,QCPnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.5f6f7f24.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n      const navStyle= {\n            color: \"#ffffff\",\n            textDecoration: \"none\",\n\n      }\n  return (\n    <nav>\n          <h3>Logo</h3>\n          <ul className=\"nav-links\">\n                <Link to=\"/about\" style={navStyle}>\n\n                <li>About</li>\n\n                </Link>\n            \n                <Link to=\"/shop\" style={navStyle}>\n\n                <li>Shop</li>\n\n                </Link>\n          </ul>\n    </nav>    \n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\nfunction Shop() {\n\n      useEffect(() => {\n            fetchItems();\n      }, []);\n\n      const [items, setItems] = useState([]);\n      // fetch doens't work!!!\n      const fetchItems = async () => {\n            const data = await fetch('https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get'\n            );\n            \n            const items = await data.json();\n            console.log(data)\n            console.log(items.items)\n            setItems(items.items)\n      };\nreturn (\n      <div>\n            {items.map(item => (\n                  <h1 key={item.itemid}>{item.name}>\n                        <Link to={`/shop/${item.itemid}`}>{item.name}</Link>\n                  </h1>\n            ))}\n\n      </div>\n);\n    }\n\nexport default Shop;\n","import React from 'react';\nimport './App.css';\n\nfunction About() {\n  return (\n    <div>\n\n    <h1>About Page</h1>\n    \n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect} from 'react';\nimport './App.css';\n\nfunction ItemDetail( match ) {\n      useEffect(()=>{\n            fetchItem();\n            console.log(match);\n      }, []);\n      const [item, setItem] = useState({});\n\n      const fetchItem = async () => {\n            const fetchItem = await fetch(`https://fortnite-public-api.theapinetwork.com/prod09/item/get?ids=${match.params.id}`)\n            const item = await fetchItem.json();\n            console.log(item)\n      }\n  return (\n    <div>\n          <h3>Logo</h3>\n      <h1>{item.name}</h1>\n    </div>    \n  );\n}\n\nexport default ItemDetail;\n","import React from 'react';\nimport './App.css';\nimport Nav from \"./Nav\";\nimport Shop from \"./Shop\";\nimport About from \"./About\";\nimport ItemDetail from \"./ItemDetail\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nfunction App() {\n  return (\n    <Router>\n\n    <div className=\"App\">\n\n    <Nav />\n    <Switch>\n\n    <Route path=\"/\" exact component={Home}/>\n    <Route path=\"/about\" component={About}/>\n    <Route path=\"/shop\" exact component={Shop} />\n    <Route path=\"/shop/:id\" component={ItemDetail} />\n\n    \n    </Switch>\n    </div>\n    </Router>\n  );\n}\n\n\nconst Home = () => (\n  <>\n  <h1>Home Page</h1>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}